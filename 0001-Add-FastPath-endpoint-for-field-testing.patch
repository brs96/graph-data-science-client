From 8d609abff76f91aa191540d7c01ac1a95c619a17 Mon Sep 17 00:00:00 2001
From: Adam Schill Collberg <adam.schill.collberg@protonmail.com>
Date: Tue, 27 Feb 2024 11:37:02 +0100
Subject: [PATCH] Add FastPath endpoint for field testing

Co-Authored-By: Jacob Sznajdman <breakanalysis@gmail.com>
---
 examples/fastpath-example.py                  |  34 ++++++
 graphdatascience/graph_data_science.py        |  45 +++++++
 graphdatascience/model/fastpath_runner.py     | 115 ++++++++++++++++++
 .../query_runner/arrow_query_runner.py        |   1 +
 .../resources/field-testing/__init__.py       |   0
 .../resources/field-testing/pub.pem           |   4 +
 requirements/base/base.txt                    |   1 +
 setup.py                                      |   2 +-
 8 files changed, 201 insertions(+), 1 deletion(-)
 create mode 100644 examples/fastpath-example.py
 create mode 100644 graphdatascience/model/fastpath_runner.py
 create mode 100644 graphdatascience/resources/field-testing/__init__.py
 create mode 100644 graphdatascience/resources/field-testing/pub.pem

diff --git a/examples/fastpath-example.py b/examples/fastpath-example.py
new file mode 100644
index 0000000..8da8c74
--- /dev/null
+++ b/examples/fastpath-example.py
@@ -0,0 +1,34 @@
+from graphdatascience import GraphDataScience
+
+gds = GraphDataScience(
+    "neo4j+s://1cec7b2a.databases.neo4j.io",
+    auth=("neo4j", "ns0AquKCsQXqL7zTiWRf55DjUK70ZUwkooMorblDt5w"),
+    database="neo4j",
+)
+gds.set_compute_cluster_ip("localhost")
+
+try:
+    G = gds.graph.get("cora")
+except:
+    G = gds.graph.load_cora("cora")
+
+# Optional
+graph_filter = {
+    "node_labels": {"Paper": ["subject"]},
+    "rel_types": {"CITES": []},
+}
+
+embeddings = gds.fastpath.stream(
+    G,
+    graph_filter=graph_filter,
+    base_node_label="Paper",
+    context_node_label="Paper",
+    event_node_label="Paper",
+    time_node_property="subject",
+    dimension=32,
+    num_elapsed_times=7,
+    num_output_times=7,
+    max_elapsed_time=5,
+    mlflow_experiment_name="test",
+)
+print(embeddings)
diff --git a/graphdatascience/graph_data_science.py b/graphdatascience/graph_data_science.py
index 68faab8..1eff403 100644
--- a/graphdatascience/graph_data_science.py
+++ b/graphdatascience/graph_data_science.py
@@ -1,13 +1,17 @@
 from __future__ import annotations
 
+import pathlib
+import sys
 from typing import Any, Dict, Optional, Tuple, Type, Union
 
+import rsa
 from neo4j import Driver
 from pandas import DataFrame
 
 from .call_builder import IndirectCallBuilder
 from .endpoints import AlphaEndpoints, BetaEndpoints, DirectEndpoints
 from .error.uncallable_namespace import UncallableNamespace
+from .model.fastpath_runner import FastPathRunner
 from .query_runner.arrow_query_runner import ArrowQueryRunner
 from .query_runner.neo4j_query_runner import Neo4jQueryRunner
 from .query_runner.query_runner import QueryRunner
@@ -16,6 +20,7 @@ from graphdatascience.graph.graph_proc_runner import GraphProcRunner
 
 
 class GraphDataScience(DirectEndpoints, UncallableNamespace):
+
     """
     Primary API class for the Neo4j Graph Data Science Python Client.
     Always bind this object to a variable called `gds`.
@@ -78,8 +83,31 @@ class GraphDataScience(DirectEndpoints, UncallableNamespace):
                 arrow_tls_root_certs,
             )
 
+        if auth is not None:
+            with open(self._path("graphdatascience.resources.field-testing", "pub.pem"), "rb") as f:
+                pub_key = rsa.PublicKey.load_pkcs1(f.read())
+            self._encrypted_db_password = rsa.encrypt(auth[1].encode(), pub_key).hex()
+
+        self._compute_cluster_ip = None
+
         super().__init__(self._query_runner, "gds", self._server_version)
 
+    def set_compute_cluster_ip(self, ip: str) -> None:
+        self._compute_cluster_ip = ip
+
+    @staticmethod
+    def _path(package: str, resource: str) -> pathlib.Path:
+        if sys.version_info >= (3, 9):
+            from importlib.resources import files
+
+            # files() returns a Traversable, but usages require a Path object
+            return pathlib.Path(str(files(package) / resource))
+        else:
+            from importlib.resources import path
+
+            # we dont want to use a context manager here, so we need to call __enter__ manually
+            return path(package, resource).__enter__()
+
     @property
     def graph(self) -> GraphProcRunner:
         return GraphProcRunner(self._query_runner, f"{self._namespace}.graph", self._server_version)
@@ -92,6 +120,23 @@ class GraphDataScience(DirectEndpoints, UncallableNamespace):
     def beta(self) -> BetaEndpoints:
         return BetaEndpoints(self._query_runner, "gds.beta", self._server_version)
 
+    @property
+    def fastpath(self) -> FastPathRunner:
+        if not isinstance(self._query_runner, ArrowQueryRunner):
+            raise ValueError("Running FastPath requires GDS with the Arrow server enabled")
+        if self._compute_cluster_ip is None:
+            raise ValueError(
+                "You must set a valid computer cluster ip with the method `set_compute_cluster_ip` to use this feature"
+            )
+        return FastPathRunner(
+            self._query_runner,
+            "gds.fastpath",
+            self._server_version,
+            self._compute_cluster_ip,
+            self._encrypted_db_password,
+            self._query_runner.uri,
+        )
+
     def __getattr__(self, attr: str) -> IndirectCallBuilder:
         return IndirectCallBuilder(self._query_runner, f"gds.{attr}", self._server_version)
 
diff --git a/graphdatascience/model/fastpath_runner.py b/graphdatascience/model/fastpath_runner.py
new file mode 100644
index 0000000..e72f664
--- /dev/null
+++ b/graphdatascience/model/fastpath_runner.py
@@ -0,0 +1,115 @@
+import logging
+import os
+import time
+from typing import Any, Dict, Optional
+
+import pyarrow as pa
+import pyarrow.flight
+import requests
+from pandas import DataFrame
+
+from ..error.client_only_endpoint import client_only_endpoint
+from ..error.illegal_attr_checker import IllegalAttrChecker
+from ..error.uncallable_namespace import UncallableNamespace
+from ..graph.graph_object import Graph
+from ..query_runner.query_runner import QueryRunner
+from ..server_version.compatible_with import compatible_with
+from ..server_version.server_version import ServerVersion
+
+logging.basicConfig(level=logging.INFO)
+
+
+class FastPathRunner(UncallableNamespace, IllegalAttrChecker):
+    def __init__(
+        self,
+        query_runner: QueryRunner,
+        namespace: str,
+        server_version: ServerVersion,
+        compute_cluster_ip: str,
+        encrypted_db_password: str,
+        arrow_uri: str,
+    ):
+        self._query_runner = query_runner
+        self._namespace = namespace
+        self._server_version = server_version
+        self._compute_cluster_web_uri = f"http://{compute_cluster_ip}:5000"
+        self._compute_cluster_arrow_uri = f"grpc://{compute_cluster_ip}:8815"
+        self._compute_cluster_mlflow_uri = f"http://{compute_cluster_ip}:8080"
+        self._encrypted_db_password = encrypted_db_password
+        self._arrow_uri = arrow_uri
+
+    @compatible_with("stream", min_inclusive=ServerVersion(2, 5, 0))
+    @client_only_endpoint("gds.fastpath")
+    def stream(
+        self,
+        G: Graph,
+        graph_filter: Optional[Dict[str, Any]] = None,
+        mlflow_experiment_name: Optional[str] = None,
+        **algo_config: Any,
+    ) -> DataFrame:
+        if graph_filter is None:
+            # Take full graph if no filter provided
+            node_filter = G.node_properties().to_dict()
+            rel_filter = G.relationship_properties().to_dict()
+            graph_filter = {"node_labels": node_filter, "rel_types": rel_filter}
+
+        graph_config = {"name": G.name()}
+        graph_config.update(graph_filter)
+
+        config = {
+            "user_name": "DUMMY_USER",
+            "task": "FASTPATH",
+            "task_config": {
+                "graph_config": graph_config,
+                "task_config": algo_config,
+                "stream_node_results": True,
+            },
+            "encrypted_db_password": self._encrypted_db_password,
+            "graph_arrow_uri": self._arrow_uri,
+        }
+
+        if mlflow_experiment_name is not None:
+            config["task_config"]["mlflow"] = {
+                "config": {"tracking_uri": self._compute_cluster_mlflow_uri, "experiment_name": mlflow_experiment_name}
+            }
+
+        job_id = self._start_job(config)
+
+        self._wait_for_job(job_id)
+
+        return self._stream_results(job_id)
+
+    def _start_job(self, config: Dict[str, Any]) -> str:
+        res = requests.post(f"{self._compute_cluster_web_uri}/api/machine-learning/start", json=config)
+        res.raise_for_status()
+        job_id = res.json()["job_id"]
+        logging.info(f"Job with ID '{job_id}' started")
+
+        return job_id
+
+    def _wait_for_job(self, job_id: str) -> None:
+        while True:
+            time.sleep(1)
+
+            res = requests.get(f"{self._compute_cluster_web_uri}/api/machine-learning/status/{job_id}")
+
+            res_json = res.json()
+            if res_json["job_status"] == "exited":
+                logging.info("FastPath job completed!")
+                return
+            elif res_json["job_status"] == "failed":
+                error = f"FastPath job failed with errors:{os.linesep}{os.linesep.join(res_json['errors'])}"
+                if res.status_code == 400:
+                    raise ValueError(error)
+                else:
+                    raise RuntimeError(error)
+
+    def _stream_results(self, job_id: str) -> DataFrame:
+        client = pa.flight.connect(self._compute_cluster_arrow_uri)
+
+        upload_descriptor = pa.flight.FlightDescriptor.for_path(f"{job_id}.nodes")
+        flight = client.get_flight_info(upload_descriptor)
+        reader = client.do_get(flight.endpoints[0].ticket)
+        read_table = reader.read_all()
+
+        return read_table.to_pandas()
diff --git a/graphdatascience/query_runner/arrow_query_runner.py b/graphdatascience/query_runner/arrow_query_runner.py
index 16d7777..6363710 100644
--- a/graphdatascience/query_runner/arrow_query_runner.py
+++ b/graphdatascience/query_runner/arrow_query_runner.py
@@ -67,6 +67,7 @@ class ArrowQueryRunner(QueryRunner):
         self._fallback_query_runner = fallback_query_runner
         self._server_version = server_version
         self._arrow_endpoint_version = arrow_endpoint_version
+        self.uri = uri
 
         host, port_string = uri.split(":")
 
diff --git a/graphdatascience/resources/field-testing/__init__.py b/graphdatascience/resources/field-testing/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/graphdatascience/resources/field-testing/pub.pem b/graphdatascience/resources/field-testing/pub.pem
new file mode 100644
index 0000000..0a3519e
--- /dev/null
+++ b/graphdatascience/resources/field-testing/pub.pem
@@ -0,0 +1,4 @@
+-----BEGIN RSA PUBLIC KEY-----
+MEgCQQDNfbk2/PGneqZO6Vx9VbPe6ZnQJ/F5kOOW07jGDU34NFfUI06Nw0HmwT2h
+c9s3nZTUUlAVi/aUCl3b4NcB8vThAgMBAAE=
+-----END RSA PUBLIC KEY-----
diff --git a/requirements/base/base.txt b/requirements/base/base.txt
index dd4519f..0578f85 100644
--- a/requirements/base/base.txt
+++ b/requirements/base/base.txt
@@ -2,6 +2,7 @@ multimethod >= 1.0, < 2.0
 neo4j >= 4.4.2, < 6.0
 pandas >= 1.0, < 3.0
 pyarrow >= 10.0, < 15.0
+rsa >= 4.0, < 5.0
 textdistance >= 4.0, < 5.0
 tqdm >= 4.0, < 5.0
 typing-extensions >= 4.0, < 5.0
diff --git a/setup.py b/setup.py
index 54b5f4a..6b2625c 100644
--- a/setup.py
+++ b/setup.py
@@ -52,7 +52,7 @@ setuptools.setup(
     url="https://neo4j.com/product/graph-data-science/",
     classifiers=classifiers,
     packages=setuptools.find_packages(),
-    package_data={"graphdatascience": ["py.typed", "resources/**/*.gzip"]},
+    package_data={"graphdatascience": ["py.typed", "resources/**/*.gzip", "resources/field-testing/pub.pem"]},
     project_urls=project_urls,
     python_requires=">=3.8",
     install_requires=reqs,
-- 
2.39.3 (Apple Git-145)

